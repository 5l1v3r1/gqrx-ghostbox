#!/usr/bin/env perl

################################################################################
# gqrx-ghostbox -  Utility for EVP/ghost box style radio scanning with GQRX
# Copyright (c) 2016, Douglas Haber
# All rights reserved
################################################################################
# For more information about this program and its usage, or to find the
# most recevent version, please go to:
#    http://github.com/DougHaber/gqrx-ghostbox
#
# Please see the LICENSE file included with the distribution
# for licensing terms
################################################################################


use warnings;
use strict;


use Time::HiRes qw( gettimeofday usleep );

use GQRX::Remote;
use GQRX::GhostBox;
use GQRX::GhostBox::Options;

use GQRX::GhostBox::Server;

sub main {
    my $options = GQRX::GhostBox::Options::parse_options();
    my $ghostbox = new GQRX::GhostBox($options);
    my $server = new GQRX::GhostBox::Server($ghostbox);
    my $start_time;

    $ghostbox->start();
    $server->listen();

    while(1) {
        my $last_update_time;
        my $time_until_next_cycle;

        $ghostbox->update();
        $last_update_time = gettimeofday(); # Record the time after the last update

        $server->check_sockets();

        # Sleep for the necessary amount of time
        $time_until_next_cycle = (gettimeofday() - $last_update_time + $options->{sleep_time});

        if ($time_until_next_cycle > 0) {
            usleep($time_until_next_cycle);
        }
    }
}


main();
